{"ast":null,"code":"import * as THREE from 'three';\nimport { TweenMax as TM } from 'gsap';\nimport vertexShader from './vertexShader.glsl';\nimport fragmentShader from './fragmentShader.glsl';\nexport default class Figure {\n  constructor(scene, cb) {\n    this.$image = document.querySelector('.tile__image');\n    this.scene = scene;\n    this.callback = cb;\n    this.loader = new THREE.TextureLoader();\n    this.image = this.loader.load(this.$image.src, () => {\n      this.start();\n    });\n    this.hover = this.loader.load(this.$image.dataset.hover);\n    this.$image.style.opacity = 0;\n    this.sizes = new THREE.Vector2(0, 0);\n    this.offset = new THREE.Vector2(2, 2);\n    this.mouse = new THREE.Vector2(0, 0);\n    window.addEventListener('mousemove', ev => {\n      this.onMouseMove(ev);\n    });\n  }\n\n  start() {\n    this.getSizes();\n    this.createMesh();\n    this.callback();\n  }\n\n  getSizes() {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = this.$image.getBoundingClientRect();\n    this.sizes.set(width, height);\n    this.offset.set(left - window.innerWidth / 2 + width / 2, -top + window.innerHeight / 2 - height / 2);\n  }\n\n  createMesh() {\n    this.uniforms = {\n      u_image: {\n        type: 't',\n        value: this.image\n      },\n      u_imagehover: {\n        type: 't',\n        value: this.hover\n      },\n      u_mouse: {\n        value: this.mouse\n      },\n      u_time: {\n        value: 0\n      },\n      u_res: {\n        value: new THREE.Vector2(window.innerWidth / 2, window.innerHeight)\n      }\n    };\n    this.geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      defines: {\n        PR: window.devicePixelRatio.toFixed(3)\n      }\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.mesh.position.set(this.offset.x, this.offset.y, 0);\n    this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n    this.scene.add(this.mesh);\n  }\n\n  onMouseMove(event) {\n    TM.to(this.mouse, 0.5, {\n      x: event.clientX / window.innerWidth * 2 - 1,\n      y: -(event.clientY / window.innerHeight) * 2 + 1\n    });\n  }\n\n  update() {\n    this.uniforms.u_time.value += 0.01;\n  }\n\n}","map":{"version":3,"sources":["/Users/stik/Desktop/react-animation-with-create-app/src/Figure.js"],"names":["THREE","TweenMax","TM","vertexShader","fragmentShader","Figure","constructor","scene","cb","$image","document","querySelector","callback","loader","TextureLoader","image","load","src","start","hover","dataset","style","opacity","sizes","Vector2","offset","mouse","window","addEventListener","ev","onMouseMove","getSizes","createMesh","width","height","top","left","getBoundingClientRect","set","innerWidth","innerHeight","uniforms","u_image","type","value","u_imagehover","u_mouse","u_time","u_res","geometry","PlaneBufferGeometry","material","ShaderMaterial","defines","PR","devicePixelRatio","toFixed","mesh","Mesh","position","x","y","scale","add","event","to","clientX","clientY","update"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { TweenMax as TM } from 'gsap'\nimport vertexShader from './vertexShader.glsl'\nimport fragmentShader from './fragmentShader.glsl'\n\nexport default class Figure {\n    constructor(scene, cb) {\n        this.$image = document.querySelector('.tile__image')\n        this.scene = scene\n        this.callback = cb\n\n        this.loader = new THREE.TextureLoader()\n\n        this.image = this.loader.load(this.$image.src, () => {\n            this.start()\n        })\n        this.hover = this.loader.load(this.$image.dataset.hover)\n        this.$image.style.opacity = 0\n        this.sizes = new THREE.Vector2(0, 0)\n        this.offset = new THREE.Vector2(2, 2)\n\n        this.mouse = new THREE.Vector2(0, 0)\n        window.addEventListener('mousemove', ev => {\n            this.onMouseMove(ev)\n        })\n    }\n\n    start() {\n        this.getSizes()\n\n        this.createMesh()\n\n        this.callback()\n    }\n\n    getSizes() {\n        const { width, height, top, left } = this.$image.getBoundingClientRect()\n\n        this.sizes.set(width, height)\n\n        this.offset.set(\n            left - window.innerWidth / 2 + width / 2,\n            -top + window.innerHeight / 2 - height / 2\n        )\n    }\n\n    createMesh() {\n        this.uniforms = {\n            u_image: { type: 't', value: this.image },\n            u_imagehover: { type: 't', value: this.hover },\n            u_mouse: { value: this.mouse },\n            u_time: { value: 0 },\n            u_res: {\n                value: new THREE.Vector2(window.innerWidth / 2, window.innerHeight)\n            }\n        }\n\n        this.geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            defines: {\n                PR: window.devicePixelRatio.toFixed(3)\n            }\n        })\n\n        this.mesh = new THREE.Mesh(this.geometry, this.material)\n\n        this.mesh.position.set(this.offset.x, this.offset.y, 0)\n        this.mesh.scale.set(this.sizes.x, this.sizes.y, 1)\n\n        this.scene.add(this.mesh)\n    }\n\n    onMouseMove(event) {\n        TM.to(this.mouse, 0.5, {\n            x: (event.clientX / window.innerWidth) * 2 - 1,\n            y: -(event.clientY / window.innerHeight) * 2 + 1\n        })\n    }\n\n    update() {\n        this.uniforms.u_time.value += 0.01\n    }\n}\n"]},"metadata":{},"sourceType":"module"}