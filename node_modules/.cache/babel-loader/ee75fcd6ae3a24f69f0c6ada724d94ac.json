{"ast":null,"code":"import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Vector2, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial\";\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\nimport { PlaneBuilder } from \"@babylonjs/core/Meshes/Builders/planeBuilder\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { ActionManager } from \"@babylonjs/core/Actions/actionManager\";\nimport { ExecuteCodeAction } from \"@babylonjs/core/Actions/directActions\";\nimport \"@babylonjs/core/Culling/ray\";\nimport gsap from \"gsap\";\n\nclass App {\n  constructor() {\n    this.canvas = null;\n    this.engine = null;\n    this.scene = null;\n    this.plane = null;\n    this.time = 0;\n    this.maskVisibility = {\n      value: 0\n    };\n    this.maskPosition = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  init() {\n    this.setup();\n    this.addListeners();\n  }\n\n  setup() {\n    this.canvas = document.querySelector(\"#app\");\n    this.engine = new Engine(this.canvas, true, null, true);\n    this.scene = new Scene(this.engine); // Adding the vertex and fragment shaders to the Babylon's ShaderStore\n\n    Effect.ShadersStore[\"customVertexShader\"] = require(\"./shader/vertex.glsl\");\n    Effect.ShadersStore[\"customFragmentShader\"] = require(\"./shader/fragment.glsl\"); // Creating the shader material using the `custom` shaders we added to the ShaderStore\n\n    const planeMaterial = new ShaderMaterial(\"PlaneMaterial\", this.scene, {\n      vertex: \"custom\",\n      fragment: \"custom\",\n      attributes: [\"position\", \"normal\", \"uv\"],\n      uniforms: [\"worldViewProjection\"]\n    });\n    planeMaterial.backFaceCulling = false; // Creating a basic plane and adding the shader material to it\n\n    this.plane = new PlaneBuilder.CreatePlane(\"Plane\", {\n      width: 1,\n      height: 1\n    }, this.scene);\n    this.plane.scaling = new Vector3(10, 9 / 16 * 10, 1);\n    this.plane.material = planeMaterial; // Passing the images to the fragment shader as a `Texture`\n\n    const frontTexture = new Texture(\"src/images/lantern.jpg\");\n    const backTexture = new Texture(\"src/images/lantern-bw.jpg\");\n    this.plane.material.setTexture(\"u_frontTexture\", frontTexture);\n    this.plane.material.setTexture(\"u_backTexture\", backTexture); // Actions on the plane mesh\n\n    this.plane.actionManager = new ActionManager(this.scene);\n    this.plane.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnPointerOverTrigger, () => this.onPlaneHover()));\n    this.plane.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnPointerOutTrigger, () => this.onPlaneLeave())); // Camera\n\n    const camera = new ArcRotateCamera(\"Camera\", -Math.PI / 2, Math.PI / 2, 10, Vector3.Zero(), this.scene); // camera.attachControl(this.canvas);\n\n    this.engine.runRenderLoop(() => this.scene.render());\n    this.scene.registerBeforeRender(() => {\n      this.plane.material.setFloat(\"uPlaneRatio\", this.plane.scaling.x / this.plane.scaling.y);\n      this.plane.material.setFloat(\"u_maskVisibility\", this.maskVisibility.value);\n      this.time++;\n      this.plane.material.setFloat(\"u_time\", this.time);\n      this.plane.material.setVector2(\"u_maskPosition\", new Vector2(this.maskPosition.x, this.maskPosition.y));\n    });\n  }\n\n  addListeners() {\n    window.addEventListener(\"resize\", () => this.engine.resize());\n    window.addEventListener(\"mousemove\", () => {\n      // Casting a ray whose origin corresponds to the mouse position\n      const pickResult = this.scene.pick(this.scene.pointerX, this.scene.pointerY); // Check if the ray intersects something\n\n      if (pickResult.hit) {\n        // These result in normalized values that go from -0.5 to 0.5, exactly like the UVs in the shader\n        const x = pickResult.pickedPoint.x / this.plane.scaling.x;\n        const y = pickResult.pickedPoint.y / this.plane.scaling.y;\n        this.maskPosition = {\n          x,\n          y\n        };\n      }\n    });\n  }\n\n  onPlaneHover() {\n    gsap.to(this.maskVisibility, {\n      duration: 0.5,\n      value: 1\n    });\n  }\n\n  onPlaneLeave() {\n    gsap.to(this.maskVisibility, {\n      duration: 0.5,\n      value: 0\n    });\n  }\n\n}\n\nconst app = new App();\napp.init();","map":{"version":3,"sources":["/Users/stik/Desktop/react-animation-with-create-app/src/Scene.js"],"names":["Engine","Scene","Vector2","Vector3","ArcRotateCamera","ShaderMaterial","Effect","PlaneBuilder","Texture","ActionManager","ExecuteCodeAction","gsap","App","constructor","canvas","engine","scene","plane","time","maskVisibility","value","maskPosition","x","y","init","setup","addListeners","document","querySelector","ShadersStore","require","planeMaterial","vertex","fragment","attributes","uniforms","backFaceCulling","CreatePlane","width","height","scaling","material","frontTexture","backTexture","setTexture","actionManager","registerAction","OnPointerOverTrigger","onPlaneHover","OnPointerOutTrigger","onPlaneLeave","camera","Math","PI","Zero","runRenderLoop","render","registerBeforeRender","setFloat","setVector2","window","addEventListener","resize","pickResult","pick","pointerX","pointerY","hit","pickedPoint","to","duration","app"],"mappings":"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","sourcesContent":["import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Vector2, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial\";\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\nimport { PlaneBuilder } from \"@babylonjs/core/Meshes/Builders/planeBuilder\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { ActionManager } from \"@babylonjs/core/Actions/actionManager\";\nimport { ExecuteCodeAction } from \"@babylonjs/core/Actions/directActions\";\nimport \"@babylonjs/core/Culling/ray\";\n\nimport gsap from \"gsap\";\n\nclass App {\n  constructor() {\n    this.canvas = null;\n    this.engine = null;\n    this.scene = null;\n    this.plane = null;\n    this.time = 0;\n    this.maskVisibility = { value: 0 };\n    this.maskPosition = { x: 0, y: 0 };\n  }\n\n  init() {\n    this.setup();\n    this.addListeners();\n  }\n\n  setup() {\n    this.canvas = document.querySelector(\"#app\");\n    this.engine = new Engine(this.canvas, true, null, true);\n    this.scene = new Scene(this.engine);\n\n    // Adding the vertex and fragment shaders to the Babylon's ShaderStore\n    Effect.ShadersStore[\"customVertexShader\"] = require(\"./shader/vertex.glsl\");\n    Effect.ShadersStore[\n      \"customFragmentShader\"\n    ] = require(\"./shader/fragment.glsl\");\n\n    // Creating the shader material using the `custom` shaders we added to the ShaderStore\n    const planeMaterial = new ShaderMaterial(\"PlaneMaterial\", this.scene, {\n      vertex: \"custom\",\n      fragment: \"custom\",\n      attributes: [\"position\", \"normal\", \"uv\"],\n      uniforms: [\"worldViewProjection\"]\n    });\n    planeMaterial.backFaceCulling = false;\n\n    // Creating a basic plane and adding the shader material to it\n    this.plane = new PlaneBuilder.CreatePlane(\n      \"Plane\",\n      { width: 1, height: 1 },\n      this.scene\n    );\n    this.plane.scaling = new Vector3(10, (9 / 16) * 10, 1);\n    this.plane.material = planeMaterial;\n\n    // Passing the images to the fragment shader as a `Texture`\n    const frontTexture = new Texture(\"src/images/lantern.jpg\");\n    const backTexture = new Texture(\"src/images/lantern-bw.jpg\");\n    this.plane.material.setTexture(\"u_frontTexture\", frontTexture);\n    this.plane.material.setTexture(\"u_backTexture\", backTexture);\n\n    // Actions on the plane mesh\n    this.plane.actionManager = new ActionManager(this.scene);\n    this.plane.actionManager.registerAction(\n      new ExecuteCodeAction(ActionManager.OnPointerOverTrigger, () =>\n        this.onPlaneHover()\n      )\n    );\n    this.plane.actionManager.registerAction(\n      new ExecuteCodeAction(ActionManager.OnPointerOutTrigger, () =>\n        this.onPlaneLeave()\n      )\n    );\n\n    // Camera\n    const camera = new ArcRotateCamera(\n      \"Camera\",\n      -Math.PI / 2,\n      Math.PI / 2,\n      10,\n      Vector3.Zero(),\n      this.scene\n    );\n    // camera.attachControl(this.canvas);\n\n    this.engine.runRenderLoop(() => this.scene.render());\n\n    this.scene.registerBeforeRender(() => {\n      this.plane.material.setFloat(\n        \"uPlaneRatio\",\n        this.plane.scaling.x / this.plane.scaling.y\n      );\n      this.plane.material.setFloat(\n        \"u_maskVisibility\",\n        this.maskVisibility.value\n      );\n\n      this.time++;\n      this.plane.material.setFloat(\"u_time\", this.time);\n\n      this.plane.material.setVector2(\n        \"u_maskPosition\",\n        new Vector2(this.maskPosition.x, this.maskPosition.y)\n      );\n    });\n  }\n\n  addListeners() {\n    window.addEventListener(\"resize\", () => this.engine.resize());\n    window.addEventListener(\"mousemove\", () => {\n      // Casting a ray whose origin corresponds to the mouse position\n      const pickResult = this.scene.pick(\n        this.scene.pointerX,\n        this.scene.pointerY\n      );\n\n      // Check if the ray intersects something\n      if (pickResult.hit) {\n        // These result in normalized values that go from -0.5 to 0.5, exactly like the UVs in the shader\n        const x = pickResult.pickedPoint.x / this.plane.scaling.x;\n        const y = pickResult.pickedPoint.y / this.plane.scaling.y;\n\n        this.maskPosition = { x, y };\n      }\n    });\n  }\n\n  onPlaneHover() {\n    gsap.to(this.maskVisibility, {\n      duration: 0.5,\n      value: 1\n    });\n  }\n\n  onPlaneLeave() {\n    gsap.to(this.maskVisibility, {\n      duration: 0.5,\n      value: 0\n    });\n  }\n}\n\nconst app = new App();\napp.init();\n"]},"metadata":{},"sourceType":"module"}