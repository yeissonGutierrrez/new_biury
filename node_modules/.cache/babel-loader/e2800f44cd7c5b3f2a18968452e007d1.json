{"ast":null,"code":"import * as THREE from 'three';\nimport Figure from './Figure';\nconst perspective = 200;\nexport default class Scene {\n  constructor() {\n    this.container = document.getElementById('stage');\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.container,\n      alpha: true\n    }); // this.renderer.setSize(window.innerWidth, window.innerHeight)\n    // this.renderer.setPixelRatio(window.devicePixelRatio)\n\n    this.initLights();\n    this.initCamera();\n    this.figure = new Figure(this.scene, () => {\n      this.update();\n    });\n  }\n\n  initLights() {\n    const ambientlight = new THREE.AmbientLight(0xffffff, 2);\n    this.scene.add(ambientlight);\n  }\n\n  initCamera() {\n    const fov = 180 * (2 * Math.atan(window.innerHeight / 2 / perspective)) / Math.PI;\n    this.camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 1, 1000);\n    this.camera.position.set(0, 0, perspective);\n  }\n\n  onMouseMove() {\n    window.addEventListener('mousemove', ev => {\n      this.figure.onMouseMove(ev);\n    });\n  }\n\n  update() {\n    if (this.renderer === undefined) return;\n    requestAnimationFrame(this.update.bind(this));\n    this.figure.update();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n}","map":{"version":3,"sources":["/Users/stik/Desktop/react-animation-with-create-app/src/Scene.js"],"names":["THREE","Figure","perspective","Scene","constructor","container","document","getElementById","scene","renderer","WebGLRenderer","canvas","alpha","initLights","initCamera","figure","update","ambientlight","AmbientLight","add","fov","Math","atan","window","innerHeight","PI","camera","PerspectiveCamera","innerWidth","position","set","onMouseMove","addEventListener","ev","undefined","requestAnimationFrame","bind","render"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,WAAW,GAAG,GAApB;AAEA,eAAe,MAAMC,KAAN,CAAY;AACvBC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiBC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAjB;AAEA,SAAKC,KAAL,GAAa,IAAIR,KAAK,CAACG,KAAV,EAAb;AACA,SAAKM,QAAL,GAAgB,IAAIT,KAAK,CAACU,aAAV,CAAwB;AACpCC,MAAAA,MAAM,EAAE,KAAKN,SADuB;AAEpCO,MAAAA,KAAK,EAAE;AAF6B,KAAxB,CAAhB,CAJU,CASV;AACA;;AAEA,SAAKC,UAAL;AACA,SAAKC,UAAL;AAEA,SAAKC,MAAL,GAAc,IAAId,MAAJ,CAAW,KAAKO,KAAhB,EAAuB,MAAM;AACvC,WAAKQ,MAAL;AACH,KAFa,CAAd;AAIH;;AACDH,EAAAA,UAAU,GAAG;AACT,UAAMI,YAAY,GAAG,IAAIjB,KAAK,CAACkB,YAAV,CAAuB,QAAvB,EAAiC,CAAjC,CAArB;AACA,SAAKV,KAAL,CAAWW,GAAX,CAAeF,YAAf;AACH;;AAEDH,EAAAA,UAAU,GAAG;AACT,UAAMM,GAAG,GACJ,OAAO,IAAIC,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACC,WAAP,GAAqB,CAArB,GAAyBtB,WAAnC,CAAX,CAAD,GACAmB,IAAI,CAACI,EAFT;AAIA,SAAKC,MAAL,GAAc,IAAI1B,KAAK,CAAC2B,iBAAV,CACVP,GADU,EAEVG,MAAM,CAACK,UAAP,GAAoBL,MAAM,CAACC,WAFjB,EAGV,CAHU,EAIV,IAJU,CAAd;AAMA,SAAKE,MAAL,CAAYG,QAAZ,CAAqBC,GAArB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B5B,WAA/B;AACH;;AAGG6B,EAAAA,WAAW,GAAG;AACVR,IAAAA,MAAM,CAACS,gBAAP,CAAwB,WAAxB,EAAsCC,EAAD,IAAQ;AACzC,WAAKlB,MAAL,CAAYgB,WAAZ,CAAwBE,EAAxB;AACH,KAFD;AAIH;;AAELjB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKP,QAAL,KAAkByB,SAAtB,EAAiC;AACjCC,IAAAA,qBAAqB,CAAC,KAAKnB,MAAL,CAAYoB,IAAZ,CAAiB,IAAjB,CAAD,CAArB;AAEA,SAAKrB,MAAL,CAAYC,MAAZ;AAEA,SAAKP,QAAL,CAAc4B,MAAd,CAAqB,KAAK7B,KAA1B,EAAiC,KAAKkB,MAAtC;AACH;;AAvDsB","sourcesContent":["import * as THREE from 'three'\nimport Figure from './Figure'\n\nconst perspective = 200\n\nexport default class Scene {\n    constructor() {\n        this.container = document.getElementById('stage')\n\n        this.scene = new THREE.Scene()\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.container,\n            alpha: true\n        })\n\n        // this.renderer.setSize(window.innerWidth, window.innerHeight)\n        // this.renderer.setPixelRatio(window.devicePixelRatio)\n\n        this.initLights()\n        this.initCamera()\n\n        this.figure = new Figure(this.scene, () => {\n            this.update()\n        })\n        \n    }\n    initLights() {\n        const ambientlight = new THREE.AmbientLight(0xffffff, 2)\n        this.scene.add(ambientlight)\n    }\n\n    initCamera() {\n        const fov =\n            (180 * (2 * Math.atan(window.innerHeight / 2 / perspective))) /\n            Math.PI\n\n        this.camera = new THREE.PerspectiveCamera(\n            fov,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        )\n        this.camera.position.set(0, 0, perspective)\n    }\n\n\n        onMouseMove() {\n            window.addEventListener('mousemove', (ev) => {\n                this.figure.onMouseMove(ev)\n            })\n    \n        }\n\n    update() {\n        if (this.renderer === undefined) return\n        requestAnimationFrame(this.update.bind(this))\n\n        this.figure.update()\n\n        this.renderer.render(this.scene, this.camera)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}