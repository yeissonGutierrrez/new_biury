{"ast":null,"code":"import * as THREE from 'three';\nimport { TweenMax as TM } from 'gsap';\nimport vertexShader from './vertexShader.glsl';\nimport fragmentShader from './fragmentShader.glsl';\nexport default class Figure {\n  constructor(scene, cb) {\n    this.$image = document.querySelector('.tile__image');\n    this.scene = scene;\n    this.callback = cb;\n    this.loader = new THREE.TextureLoader();\n    this.image = this.loader.load(this.$image.src, () => {\n      this.start();\n    });\n    this.hover = this.loader.load(this.$image.dataset.hover);\n    this.$image.style.opacity = 0;\n    this.sizes = new THREE.Vector2(0, 0);\n    this.offset = new THREE.Vector2(0, 0);\n    this.mouse = new THREE.Vector2(0, 0); // window.addEventListener('mousemove', ev => {\n    //     this.onMouseMove(ev)\n    // })\n  }\n\n  start() {\n    this.getSizes();\n    this.createMesh();\n    this.callback();\n  }\n\n  getSizes() {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = this.$image.getBoundingClientRect();\n    this.sizes.set(width, height); // this.offset.set(\n    //     left - window.innerWidth / 2 + width / 2,\n    //     -top + window.innerHeight / 2 - height / 2\n    // )\n  }\n\n  createMesh() {\n    this.uniforms = {\n      u_image: {\n        type: 't',\n        value: this.image\n      },\n      u_imagehover: {\n        type: 't',\n        value: this.hover\n      },\n      u_mouse: {\n        value: this.mouse\n      },\n      u_time: {\n        value: 0\n      },\n      u_res: {\n        value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n      }\n    };\n    this.geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      defines: {\n        PR: window.devicePixelRatio.toFixed(1)\n      }\n    });\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.mesh.position.set(this.offset.x, this.offset.y, 0);\n    this.mesh.scale.set(this.sizes.x, this.sizes.y, 1);\n    this.scene.add(this.mesh);\n  }\n\n  onMouseMove(event) {\n    TM.to(this.mouse, 1, {\n      x: event.clientX / window.innerWidth * 2 - 1,\n      y: -(event.clientY / window.innerHeight) * 2\n    }); //rotacion\n    // TM.to(this.mesh.rotation, 0.5, {\n    //     x: -this.mouse.y * 0.3,\n    //     y: this.mouse.x * (Math.PI / 6)\n    // })\n  }\n\n  update() {\n    this.uniforms.u_time.value += 0.01;\n  }\n\n}","map":{"version":3,"sources":["/Users/stik/Desktop/react-animation-with-create-app/src/Figure.js"],"names":["THREE","TweenMax","TM","vertexShader","fragmentShader","Figure","constructor","scene","cb","$image","document","querySelector","callback","loader","TextureLoader","image","load","src","start","hover","dataset","style","opacity","sizes","Vector2","offset","mouse","getSizes","createMesh","width","height","top","left","getBoundingClientRect","set","uniforms","u_image","type","value","u_imagehover","u_mouse","u_time","u_res","window","innerWidth","innerHeight","geometry","PlaneBufferGeometry","material","ShaderMaterial","defines","PR","devicePixelRatio","toFixed","mesh","Mesh","position","x","y","scale","add","onMouseMove","event","to","clientX","clientY","update"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { TweenMax as TM } from 'gsap'\nimport vertexShader from './vertexShader.glsl'\nimport fragmentShader from './fragmentShader.glsl'\n\nexport default class Figure {\n    constructor(scene, cb) {\n        this.$image = document.querySelector('.tile__image')\n        this.scene = scene\n        this.callback = cb\n\n        this.loader = new THREE.TextureLoader()\n\n        this.image = this.loader.load(this.$image.src, () => {\n            this.start()\n        })\n        this.hover = this.loader.load(this.$image.dataset.hover)\n        this.$image.style.opacity = 0\n        this.sizes = new THREE.Vector2(0, 0)\n        this.offset = new THREE.Vector2(0, 0)\n\n        this.mouse = new THREE.Vector2(0, 0)\n        \n        // window.addEventListener('mousemove', ev => {\n        //     this.onMouseMove(ev)\n        // })\n    }\n\n    start() {\n        this.getSizes()\n\n        this.createMesh()\n\n        this.callback()\n    }\n\n    getSizes() {\n        const { width, height, top, left } = this.$image.getBoundingClientRect()\n\n        this.sizes.set(width, height)\n\n        // this.offset.set(\n        //     left - window.innerWidth / 2 + width / 2,\n        //     -top + window.innerHeight / 2 - height / 2\n        // )\n    }\n\n    createMesh() {\n        this.uniforms = {\n            u_image: { type: 't', value: this.image },\n            u_imagehover: { type: 't', value: this.hover },\n            u_mouse: { value: this.mouse },\n            u_time: { value: 0 },\n            u_res: {\n                value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n            }\n        }\n\n        this.geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            defines: {\n                PR: window.devicePixelRatio.toFixed(1)\n            }\n        })\n\n        this.mesh = new THREE.Mesh(this.geometry, this.material)\n\n        this.mesh.position.set(this.offset.x, this.offset.y, 0)\n        this.mesh.scale.set(this.sizes.x, this.sizes.y, 1)\n\n        this.scene.add(this.mesh)\n    }\n\n    onMouseMove(event) {\n        TM.to(this.mouse, 1, {\n            x: (event.clientX / window.innerWidth) * 2 - 1,\n            y: -(event.clientY / window.innerHeight) * 2 \n        })\n        //rotacion\n\n        // TM.to(this.mesh.rotation, 0.5, {\n        //     x: -this.mouse.y * 0.3,\n        //     y: this.mouse.x * (Math.PI / 6)\n        // })\n    }\n\n    update() {\n        this.uniforms.u_time.value += 0.01\n    }\n}\n"]},"metadata":{},"sourceType":"module"}